name: Build Image from App Repo

on:
  repository_dispatch:
    types: [build-image]

permissions:
  contents: read
  id-token: write  # Required for GitHub OIDC â†’ GCP auth

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GAR_LOCATION: us-central1
      PROJECT_ID: sivaprasad-426906
      REPO_NAME: cloud-run-source-deploy
      IMAGE_NAME: app-image
      IMAGE_TAG: ${{ github.sha }}
      FULL_IMAGE: us-central1-docker.pkg.dev/sivaprasad-426906/cloud-run-source-deploy/app-image:${{ github.sha }}

    steps:
      # Step 1: Clone app repo
      - name: Clone app repo
        uses: actions/checkout@v3
        with:
          repository: sivaprasadhub/app-repo
          token: ${{ secrets.APP_REPO_TOKEN }}
          path: app-repo

      # Step 2: Authenticate with GCP using Workload Identity Federation
      - id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/954176678706/locations/global/workloadIdentityPools/github-demo-pool/providers/github'
          service_account: 'github-action-wif@sivaprasad-426906.iam.gserviceaccount.com'

      # Step 3: Setup gcloud SDK
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      # Step 4: Configure Docker for Artifact Registry
      - name: Configure Docker
        run: |
          gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev --quiet

      # Step 5: Build Docker image
      - name: Build Docker image
        run: |
          cd app-repo
          docker build -t ${{ env.FULL_IMAGE }} .

      # Step 6: Push Docker image to Artifact Registry
      - name: Push Docker image
        run: docker push ${{ env.FULL_IMAGE }}


            # Step 7: Poll Container Analysis API for vulnerability scan result
      - name: Check vulnerability scan result
        run: |
          echo "Polling scan status for image: ${{ env.FULL_IMAGE }}"

          DIGEST=$(gcloud artifacts docker images describe ${{ env.FULL_IMAGE }} \
            --format='value(image_summary.digest)')

          echo "Image digest: $DIGEST"

          for i in {1..10}; do
            echo "Attempt $i: Checking scan status..."

            STATUS=$(gcloud container images describe \
              us-central1-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}@${DIGEST} \
              --format='value(image_summary.scan_status)')

            echo "Current scan status: $STATUS"

            if [[ "$STATUS" == "FINISHED_SUCCESS" ]]; then
              echo "Vulnerability scan passed"
              exit 0
            elif [[ "$STATUS" == "FINISHED_FAILED" || "$STATUS" == "FINISHED_UNSUPPORTED" ]]; then
              echo "Vulnerability scan failed or unsupported"
              exit 1
            fi

            echo "Waiting for scan to complete..."
            sleep 15
          done

          echo "Scan did not complete in time"
          exit 1

   
