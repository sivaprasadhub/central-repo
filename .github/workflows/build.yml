name: Build Image from App Repo

on:
  repository_dispatch:
    types: [build-image]

permissions:
  contents: read
  id-token: write  # Required for GitHub OIDC â†’ GCP auth

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GAR_LOCATION: us-central1
      PROJECT_ID: sivaprasad-426906
      REPO_NAME: cloud-run-source-deploy
      IMAGE_NAME: app-image
      IMAGE_TAG: ${{ github.sha }}
      FULL_IMAGE: us-central1-docker.pkg.dev/sivaprasad-426906/cloud-run-source-deploy/app-image:${{ github.sha }}

    steps:
      # Step 1: Clone app repo
      - name: Clone app repo
        uses: actions/checkout@v3
        with:
          repository: sivaprasadhub/app-repo
          token: ${{ secrets.APP_REPO_TOKEN }}
          path: app-repo

      # Step 2: Authenticate with GCP using Workload Identity Federation
      - id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/954176678706/locations/global/workloadIdentityPools/github-demo-pool/providers/github'
          service_account: 'github-action-wif@sivaprasad-426906.iam.gserviceaccount.com'

      # Step 3: Setup gcloud SDK
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      # Step 4: Configure Docker for Artifact Registry
      - name: Configure Docker
        run: |
          gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev --quiet

      # Step 5: Build Docker image
      - name: Build Docker image
        run: |
          cd app-repo
          docker build -t ${{ env.FULL_IMAGE }} .

      # Step 6: Push Docker image to Artifact Registry
      - name: Push Docker image
        run: docker push ${{ env.FULL_IMAGE }}


            # Step 7: Poll Container Analysis API for vulnerability scan result
      - name: Check vulnerability scan via Container Analysis API
        run: |
          echo "Checking vulnerability scan for image: ${{ env.FULL_IMAGE }}"

          # Get the image digest
          DIGEST=$(gcloud artifacts docker images describe ${{ env.FULL_IMAGE }} \
            --format='value(image_summary.digest)')

          RESOURCE_URI="https://${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}@${DIGEST}"
          echo "Using RESOURCE_URI=$RESOURCE_URI"

          ACCESS_TOKEN=$(gcloud auth print-access-token)

          MAX_ATTEMPTS=20
          WAIT_TIME=30

          for i in $(seq 1 $MAX_ATTEMPTS); do
            echo "Attempt $i: Calling Container Analysis API..."

            RESPONSE=$(curl -s -H "Authorization: Bearer $ACCESS_TOKEN" \
              "https://containeranalysis.googleapis.com/v1/projects/${{ env.PROJECT_ID }}/occurrences?filter=resourceUrl=\"${RESOURCE_URI}\" AND kind=\"VULNERABILITY\"")

            COUNT=$(echo "$RESPONSE" | jq '.occurrences | length')

            if [[ "$COUNT" -eq 0 ]]; then
              echo "No vulnerabilities found yet. Waiting for next attempt..."
              sleep $WAIT_TIME
              continue
            fi

            echo "Found $COUNT vulnerability occurrences."

            HIGH_COUNT=$(echo "$RESPONSE" | jq '[.occurrences[] | select(.vulnerability.effectiveSeverity == "HIGH" or .vulnerability.effectiveSeverity == "CRITICAL")] | length')

            echo "Number of HIGH or CRITICAL vulnerabilities: $HIGH_COUNT"

            if [[ "$HIGH_COUNT" -eq 0 ]]; then
              echo "Scan passed: No high or critical vulnerabilities found."
              exit 0
            else
              echo "Scan failed: High or critical vulnerabilities found."
              echo "$RESPONSE" | jq .
              exit 1
            fi
          done

          echo "Scan did not complete in time or no data returned."
          exit 1




   
