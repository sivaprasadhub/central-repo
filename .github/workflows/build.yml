name: Build Image from App Repo

on:
  repository_dispatch:
    types: [build-image]

permissions:
  contents: read
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest

    # All environment variables for the job
    env:
      GAR_LOCATION: us-central1
      PROJECT_ID: sivaprasad-426906
      REPO_NAME: cloud-run-source-deploy
      IMAGE_NAME: app-image
      IMAGE_TAG: ${{ github.sha }}
      FULL_IMAGE: us-central1-docker.pkg.dev/sivaprasad-426906/cloud-run-source-deploy/app-image:${{ github.sha }}

    steps:
      # Step 1: Clone app repo
      - name: Clone app repo
        uses: actions/checkout@v3
        with:
          repository: sivaprasadhub/app-repo
          token: ${{ secrets.APP_REPO_TOKEN }}
          path: app-repo

      # Step 2: Authenticate with GCP using OIDC
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/954176678706/locations/global/workloadIdentityPools/github-demo-pool/providers/github
          service_account: github-action-wif@sivaprasad-426906.iam.gserviceaccount.com

      # Step 3: Set up gcloud SDK
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      # Step 4: Configure Docker for Artifact Registry
      - name: Configure Docker authentication
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev --quiet

      # Step 5: Build Docker image
      - name: Build Docker image
        run: |
          cd app-repo
          docker build -t ${{ env.FULL_IMAGE }} .

      # Step 6: Push Docker image
      - name: Push Docker image
        run: docker push ${{ env.FULL_IMAGE }}

      # Step 7: Scan the pushed image via Container Analysis API
      - name: Scan image via Container Analysis API
        run: |
          set -e

          echo "Scanning image: $FULL_IMAGE"

          # Obtain an access token
          TOKEN=$(gcloud auth print-access-token)

          # Retrieve the digest of the pushed image
          DIGEST=$(gcloud artifacts docker images describe "$FULL_IMAGE" \
            --format='value(image_summary.digest)')
          if [ -z "$DIGEST" ]; then
            echo "Error: Digest not found for $FULL_IMAGE"
            exit 1
          fi

          # Construct the resource URL for Container Analysis
          BASE_NO_TAG=${FULL_IMAGE%%:*}
          RESOURCE_URL="https://${BASE_NO_TAG}@${DIGEST}"
          echo "Resource URL: $RESOURCE_URL"

          # Call the vulnerabilitySummary endpoint
          API="https://containeranalysis.googleapis.com/v1/projects/${PROJECT_ID}/locations/${GAR_LOCATION}/occurrences:vulnerabilitySummary"
          SUMMARY=$(curl -s -H "Authorization: Bearer $TOKEN" \
            "${API}?filter=resourceUrl=\"${RESOURCE_URL}\"&returnPartialSuccess=true")

          # Sum up all vulnerability counts
          TOTAL=$(echo "$SUMMARY" | jq '(.counts // [] | map(.totalCount) | add)')

          if [ "$TOTAL" -gt 0 ]; then
            echo "VULNERABILITIES FOUND in $FULL_IMAGE: total=$TOTAL"
            echo "$SUMMARY" | jq '.counts'
            exit 1
          else
            echo "NO VULNERABILITIES in $FULL_IMAGE"
          fi
