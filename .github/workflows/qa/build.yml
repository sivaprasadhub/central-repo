name: QA Build Pipeline

on:
  workflow_dispatch:
    repository_dispatch:
        types: [sub-scheck]

        jobs:
          test:
              runs-on: ubuntu-latest
                  steps:
                        - run: echo "QA workflow triggered successfully! check" 




# ###############################################################################
# # Workflow: Build ➜ Container‑Analysis Scan ➜ Promote
# ###############################################################################
# name: Build ➜ Scan ➜ Promote

# on:
#   repository_dispatch:
#     types: [sub-scheck]

# ###############################################################################
# # Global environment variables
# ###############################################################################
# env:
#   WORKLOAD_IDENTITY_PROVIDER: 'projects/954176678706/locations/global/workloadIdentityPools/github-demo-pool/providers/github'
#   SERVICE_ACCOUNT:            'github-action-wif@sivaprasad-426906.iam.gserviceaccount.com'

#   QUAR_IMAGE_REGISTRY:   us-central1-docker.pkg.dev/sivaprasad-426906/cloud-run-source-deploy
#   #SECURE_IMAGE_REGISTRY: us-central1-docker.pkg.dev/decent-creek-464109-p6/secure-repo
#   GAR_LOCATION:          us-central1

#   PROJECT_ID: sivaprasad-426906       # GCP project for API calls
#   LOCATION:   us-central1                   # Container Analysis location

# ###############################################################################
# # Job 1: Build and push changed Dockerfiles to the quarantine registry
# ###############################################################################
# jobs:
#   build:
#     runs-on: ubuntu-latest
#     permissions: { contents: read, id-token: write }

#     outputs:
#       built_images: ${{ steps.collect.outputs.images_json }}
#       repo_name:    ${{ steps.clone_repo.outputs.REPO_NAME }}
#       commit_tag:   ${{ github.event.client_payload.sha }}

#     steps:
#       # Checkout orchestration repository
#       - uses: actions/checkout@v3

#       # Clone the application repository at the triggering SHA
#       - id: clone_repo
#         name: Clone application repository
#         run: |
#           REPO_FULL="${{ github.event.client_payload.repository }}"
#           REPO_NAME="${REPO_FULL#*/}"
#           git clone https://x-access-token:${{ secrets.BUILDER_REPO_TOKEN }}@github.com/$REPO_FULL "$REPO_NAME"
#           cd "$REPO_NAME"
#           git checkout "${{ github.event.client_payload.sha }}"
#           echo "REPO_NAME=$REPO_NAME" >> "$GITHUB_OUTPUT"
#       # Resolve base commit (empty tree on first run)
#       - id: base
#         name: Resolve base commit
#         run: |
#           cd "${{ steps.clone_repo.outputs.REPO_NAME }}"
#           if git rev-parse HEAD~1 >/dev/null 2>&1; then
#             echo "sha=$(git rev-parse HEAD~1)" >> "$GITHUB_OUTPUT"
#           else
#             echo "sha=4b825dc642cb6eb9a060e54bf8d69288fbee4904" >> "$GITHUB_OUTPUT"
#           fi
#       # Detect Dockerfiles that changed
#       - id: diff
#         name: Detect changed Dockerfiles
#         uses: tj-actions/changed-files@v46
#         with:
#           token: ${{ github.token }}
#           path: ${{ steps.clone_repo.outputs.REPO_NAME }}
#           base_sha: ${{ steps.base.outputs.sha }}
#           sha:      ${{ github.event.client_payload.sha }}
#           use_rest_api: false
#           files: |
#             **/Dockerfile*
#       # Authenticate to Google Cloud
#       - uses: google-github-actions/auth@v1
#         with:
#           workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
#           service_account:            ${{ env.SERVICE_ACCOUNT }}

#       # Set up Buildx builder
#       - uses: docker/setup-buildx-action@v2

#       # Configure Docker for Artifact Registry
#       - name: Configure docker for Artifact Registry
#         run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

#       # Build and push each changed Dockerfile
#       - name: Build and push images
#         run: |
#           set -e
#           REPO="${{ steps.clone_repo.outputs.REPO_NAME }}"
#           SHA="${{ github.event.client_payload.sha }}"
#           cd "$REPO"
#           > /tmp/built.txt
#           for FILE in ${{ steps.diff.outputs.all_changed_files }}; do
#             [[ "$FILE" != *Dockerfile* ]] && continue
#             DIR=$(dirname "$FILE")
#             COMP=$(basename "$FILE" | sed -E 's/^Dockerfile[-\.]?//')
#             COMP=${COMP:-default}
#             TAG="$REPO-$COMP:insecure-$SHA"
#             FULL="$QUAR_IMAGE_REGISTRY/$TAG"
#             docker build -f "$FILE" -t "$FULL" "$DIR"
#             docker push "$FULL"
#             echo "$FULL" >> /tmp/built.txt
#           done
#       # Collect list of built images
#       - id: collect
#         name: Collect built image list
#         run: |
#           if [ -s /tmp/built.txt ]; then
#             jq -Rsc 'split("\n")[:-1]' /tmp/built.txt > /tmp/list.json
#             echo "images_json=$(cat /tmp/list.json)" >> "$GITHUB_OUTPUT"
#           else
#             echo "images_json=[]" >> "$GITHUB_OUTPUT"
#           fi
# ###############################################################################
# # Job 2: Scan images using vulnerabilitySummary REST API
# ###############################################################################
#   ca_scan:
#     needs: build
#     if: needs.build.outputs.built_images != '[]'
#     runs-on: ubuntu-latest
#     permissions: { id-token: write }

#     steps:
#       # Checkout for workspace
#       - uses: actions/checkout@v3

#       # GCP authentication
#       - uses: google-github-actions/auth@v1
#         with:
#           workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
#           service_account:            ${{ env.SERVICE_ACCOUNT }}

#       # Loop through images, call REST API, fail if vulnerabilities found
#       - name: Scan images via Container Analysis API
#         env:
#           IMAGES_JSON: ${{ needs.build.outputs.built_images }}
#         run: |
#           set -e
#           TOKEN=$(gcloud auth print-access-token)
#           for IMG in $(echo "$IMAGES_JSON" | jq -r '.[]'); do
#             echo "Scanning $IMG"
#             DIGEST=$(gcloud artifacts docker images describe "$IMG" \
#                        --format='value(image_summary.digest)')
#             [ -z "$DIGEST" ] && { echo "Digest not found"; exit 1; }
#             BASE_NO_TAG=${IMG%%:*}
#             RESOURCE_URL="https://${BASE_NO_TAG}@${DIGEST}"
#             API="https://containeranalysis.googleapis.com/v1/projects/${PROJECT_ID}/locations/${LOCATION}/occurrences:vulnerabilitySummary"
#             SUMMARY=$(curl -s -H "Authorization: Bearer $TOKEN" \
#               "${API}?filter=resourceUrl=\"${RESOURCE_URL}\"&returnPartialSuccess=true")
#             TOTAL=$(echo "$SUMMARY" | jq '[(.counts // [])[] .totalCount | tonumber] | add')
#             if [ "$TOTAL" -gt 0 ]; then
#               echo "Vulnerabilities found in $IMG"
#               echo "$SUMMARY" | jq '.counts'
#               exit 1
#             fi
#             echo "No vulnerabilities in $IMG"
#           done




###############################################################################
# Job 3: Promote images if the scan job succeeded
###############################################################################
  # promote_secure:
  #   needs: [build, ca_scan]
  #   if: needs.ca_scan.result == 'success'
  #   runs-on: ubuntu-latest
  #   permissions:
  #     id-token: write
  #     packages: write
  #   strategy:
  #     matrix:
  #       image: ${{ fromJson(needs.build.outputs.built_images) }}

  #   steps:
  #     # Checkout for GHCR context
  #     - uses: actions/checkout@v3

  #     # GCP authentication
  #     - uses: google-github-actions/auth@v1
  #       with:
  #         workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
  #         service_account:            ${{ env.SERVICE_ACCOUNT }}

  #     # Install Cloud SDK and configure docker
  #     - uses: google-github-actions/setup-gcloud@v1

  #     - name: Docker login to secure registry
  #       run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

  #     # Copy digest to secure repo and tag secure-<sha>
  #     - id: promote
  #       name: Promote image to secure registry
  #       env:
  #         QUAR:   ${{ env.QUAR_IMAGE_REGISTRY }}
  #         SECURE: ${{ env.SECURE_IMAGE_REGISTRY }}
  #       run: |
  #         SRC="${{ matrix.image }}"
  #         DST=$(echo "$SRC" | sed "s|$QUAR|$SECURE|" | sed "s/:insecure-/:secure-/")
  #         docker pull "$SRC"
  #         docker tag  "$SRC" "$DST"
  #         docker push "$DST"
  #         echo "dst=$DST" >> "$GITHUB_OUTPUT"

  #     # Push same digest/tag to GHCR
  #     - name: Push tag to GHCR
  #       env:
  #         COMMIT_TAG: ${{ needs.build.outputs.commit_tag }}
  #         DST:        ${{ steps.promote.outputs.dst }}
  #       run: |
  #         COMPONENT=$(basename "$DST" | cut -d':' -f1)
  #         GHCR="ghcr.io/${{ github.repository_owner }}/$COMPONENT:secure-$COMMIT_TAG"
  #         echo "${{ github.token }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
  #         docker tag "$DST" "$GHCR"
  #         docker push "$GHCR"