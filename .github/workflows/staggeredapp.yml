name: Build ➜ Approve ➜ Sign

on:
  repository_dispatch:
    types: [app-code-change]

permissions:
  id-token: write
  contents: read

jobs:
  build_and_scan:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.set-image.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build image
        run: |
          echo "Building image..."
          IMAGE_URI="us-central1-docker.pkg.dev/my-project/my-repo/app:${{ github.sha }}"
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Set output
        id: set-image
        run: echo "image=${IMAGE_URI}" >> $GITHUB_OUTPUT

      - name: Scan image with GCP Container Analysis
        run: |
          echo "Scanning image: $IMAGE_URI"
          # Replace with actual gcloud container analysis command
          # gcloud artifacts docker images describe $IMAGE_URI
          echo "Scan complete (simulate pass)"

      - name: Send approval mail to Security Team
        run: |
          curl -X POST "https://api.sendgrid.com/v3/mail/send" \
          -H "Authorization: Bearer ${{ secrets.SENDGRID_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d @- <<EOF
          {
            "personalizations": [{
              "to": [{ "email": "security-team@example.com" }],
              "subject": "Security Approval required for image $IMAGE_URI"
            }],
            "from": { "email": "ci-bot@example.com" },
            "content": [{
              "type": "text/html",
              "value": "Hello Security Team,<br><br>
                        Please review and approve the image:<br>
                        <b>$IMAGE_URI</b><br><br>
                        <a href='https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'>
                          <button style='padding:10px 15px; background:#28a745; color:white; border:none; border-radius:5px;'>
                            Review & Approve
                          </button>
                        </a>"
            }]
          }
          EOF

  security_approval:
    needs: build_and_scan
    runs-on: ubuntu-latest
    environment:
      name: security
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    steps:
      - name: Security approval
        run: echo "Security team approved image: ${{ needs.build_and_scan.outputs.image }}"

      - name: Send mail to Infra Team
        run: |
          curl -X POST "https://api.sendgrid.com/v3/mail/send" \
          -H "Authorization: Bearer ${{ secrets.SENDGRID_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d @- <<EOF
          {
            "personalizations": [{
              "to": [{ "email": "infra-team@example.com" }],
              "subject": "Infra Approval required for image ${{ needs.build_and_scan.outputs.image }}"
            }],
            "from": { "email": "ci-bot@example.com" },
            "content": [{
              "type": "text/html",
              "value": "Hello Infra Team,<br><br>
                        Please review and approve the image:<br>
                        <b>${{ needs.build_and_scan.outputs.image }}</b><br><br>
                        <a href='https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'>
                          <button style='padding:10px 15px; background:#007bff; color:white; border:none; border-radius:5px;'>
                            Review & Approve
                          </button>
                        </a>"
            }]
          }
          EOF

  infra_approval_and_sign:
    needs: security_approval
    runs-on: ubuntu-latest
    environment:
      name: infra
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    steps:
      - name: Infra approval
        run: echo "Infra team approved image: ${{ needs.build_and_scan.outputs.image }}"

      - name: Sign image
        run: |
          echo "Signing image ${{ needs.build_and_scan.outputs.image }}"
          # Replace with actual signing command
          # cosign sign ${{ needs.build_and_scan.outputs.image }}
